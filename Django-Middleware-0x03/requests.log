# chats/middleware.py

import logging
from datetime import datetime


class RequestLoggingMiddleware:
    """
    Middleware to log user requests including timestamp, user, and request path
    """
    
    def __init__(self, get_response):
        self.get_response = get_response
        # Set up logger
        self.logger = logging.getLogger('request_logger')
        self.logger.setLevel(logging.INFO)
        
        # Create file handler if it doesn't exist
        if not self.logger.handlers:
            handler = logging.FileHandler('requests.log')
            formatter = logging.Formatter('%(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
            self.logger.propagate = False
        
        print("RequestLoggingMiddleware initialized")  # Debug print

    def __call__(self, request):
        # Get user information
        if hasattr(request, 'user') and hasattr(request.user, 'is_authenticated'):
            if request.user.is_authenticated:
                user = getattr(request.user, 'email', str(request.user))
            else:
                user = 'AnonymousUser'
        else:
            user = 'Unknown'
        
        # Log the request information
        log_message = f"{datetime.now()} - User: {user} - Path: {request.path}"
        self.logger.info(log_message)
        
        print(f"Logging: {log_message}")  # Debug print
        
        # Process the request
        response = self.get_response(request)
        
        return response